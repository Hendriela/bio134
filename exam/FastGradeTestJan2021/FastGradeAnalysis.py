# -*- coding: utf-8 -*-
"""
Created on Thu Apr 27 17:13:08 2017

@author: Nicholas LeBow
"""

"""
Sample student code output analysis script. Must contain a function "analyze()" which will be called by the main class.

This function will need to be re-defined whenever the exam questions or question ordering change!

Function arguments:
		questionIndex:
			Integer, indicates which question is selected (NOTE: ZERO-BASED INDEXING!)
		scriptOutput:
			String, output generated by a student script. To be compared with the correct solution for the appropriate
			question.

Expected return values:
	expectedOutput:
		String, the output a correct solution to the question would produce.
	analysisResults:
		String, should indicate whether the question was answered correctly, e.g. when several correct output strings
		exist such as when the desired output is a set and the results could be displayed in arbitrary order, allowing
		multiple correct output strings.
"""
import ast #for turning a string into a dictionary

def analyze(questionIndex, scriptOutput):
   question = questionIndex+1 # shift zero-based index to 1-based index
	
   try:
       if question == 1:
          expectedOutput = "['ATG', 'GCG', 'TCA', 'ATG', 'GTA', 'CTC', 'GCG', 'GAG']"
          if scriptOutput:
             if scriptOutput.strip() == expectedOutput:
                analysisResults = "printed output correct"
             elif expectedOutput in scriptOutput:
    	         analysisResults = "printed output contains required output"
             else:
                analysisResults = "printed output does not contain required output"
          else:
              analysisResults = 'no student output'
              
       elif question == 2:
          expectedOutput = "{1: [3], 2: [7], 3: [], 4: [4, 5, 6, 8], 5: [1], 6: [2, 9]}"
          d = {1: [3], 2: [7], 3: [], 4: [4, 5, 6, 8], 5: [1], 6: [2, 9]}
          try:
              dScriptOutput = ast.literal_eval(scriptOutput.strip())
          except:
              dScriptOutput = {}
              analysisResults = "printed output could not be converted to a dictionary"
          if scriptOutput:
             try:
                 if isinstance(dScriptOutput,dict) and len(dScriptOutput)>0:
                     if d == dScriptOutput and len(str(d))==len(scriptOutput.strip()):
                        analysisResults = "printed output correct"
                     elif d == dScriptOutput:
                        analysisResults = "printed output can be interpreted as the correct \
                                           dictionary. However, the length of the printed output\
                                           does not correspond to the length of the printed dictionary."
                     else:
                        analysisResults = "Missing keys:"+str(set(d.keys()) - set(dScriptOutput.keys()))+"\n"
                        analysisResults += "Keys that should not be present:"+str(set(dScriptOutput.keys()) - set(d.keys()))+"\n"
                        analysisResults += "Missing values:"+str(set(d.values()) - set(dScriptOutput.values()))+"\n"
                        analysisResults += "Values that should not be present:"+str(set(dScriptOutput.values()) - set(d.values()))
                        analysisResults = analysisResults.replace('set()',' none')
                 else:
                     analysisResults = "printed output could not be converted to a dictionary"
             except:
                analysisResults = 'output not analyed correctly, possibly no lists in dictionary values'
          else:
             analysisResults = 'no student output' 
           
           
       elif question == 3:
          expectedOutput = "(3, 35)\n(1, 85)"
          if scriptOutput:
             if scriptOutput.replace('\r','').strip() == expectedOutput:
                analysisResults = "printed output correct"
             elif expectedOutput.replace('\r','').strip() in scriptOutput:
                analysisResults = "printed output contains required output"
             else:
                analysisResults = "printed output does not contain required output"
          else:
              analysisResults = 'no student output'
              
    		
       elif question ==4:
          expectedOutput = "[['Hans', 'Weder', 2000], ['Andreas', 'Fischer', 2008], ['Ottfried', 'Jarren', 2013], ['Michael', 'Hengartner', 2014]]"
          if scriptOutput:
             if scriptOutput.strip() == expectedOutput:
                analysisResults = "printed output correct"
             elif (expectedOutput.strip() in scriptOutput):
    	         analysisResults = "printed output contains required output"
             else:
                analysisResults = "printed output does not contain required output"
          else:
              analysisResults = 'no student output'
    
#       elif question == 5: #can be used for checking whether a dictionary in the output is correct
#          expectedOutput = "{'Kate,': [0], 'when': [1], 'France': [2, 12], 'is': [3, 11], 'mine': [4, 16], 'and': [5, 13], 'I': [6], 'am': [7], 'yours': [8, 10], 'then': [9], 'you': [14], 'are': [15]}"
#          d = {'Kate,': [0], 'when': [1], 'France': [2, 12], 'is': [3, 11], 'mine': [4, 16], 'and': [5, 13], 'I': [6], 'am': [7], 'yours': [8, 10], 'then': [9], 'you': [14], 'are': [15]}
#          try:
#              dScriptOutput = ast.literal_eval(scriptOutput.strip())
#          except:
#              dScriptOutput = {}
#              analysisResults = "printed output could not be converted to a dictionary"
#          if scriptOutput:
#             try:
#                 if isinstance(dScriptOutput,dict) and len(dScriptOutput)>0:
#                     if d == dScriptOutput and len(str(d))==len(scriptOutput.strip()):
#                        analysisResults = "printed output correct"
#                     elif d == dScriptOutput:
#                        analysisResults = "printed output can be interpreted as the correct \
#                                           dictionary. However, the length of the printed output\
#                                           does not correspond to the length of the printed dictionary."
#                     else:
#                        analysisResults = "Missing keys:"+str(set(d.keys()) - set(dScriptOutput.keys()))+"\n"
#                        analysisResults += "Keys that should not be present:"+str(set(dScriptOutput.keys()) - set(d.keys()))+"\n"
#                        analysisResults += "Missing values:"+str(set(d.values()) - set(dScriptOutput.values()))+"\n"
#                        analysisResults += "Values that should not be present:"+str(set(dScriptOutput.values()) - set(d.values()))
#                        analysisResults = analysisResults.replace('set()',' none')
#                 else:
#                     analysisResults = "printed output could not be converted to a dictionary"
#             except:
#                analysisResults = 'output not analyed correctly, possibly lists in dictionary'
#          else:
#             analysisResults = 'no student output' 
    		
       elif question == 5:
          expectedOutput = "Wanderer ********  1\nSchmerz *********  5\
\nSchwelle ********  9\nHelle *********** 14\nTische ********** 17\
\nBrot ************ 18\nWein ************ 20"
          if scriptOutput:
             if scriptOutput.replace('\r','').strip() == expectedOutput:
                analysisResults = "printed output correct"
             elif expectedOutput.replace('\r','').strip() in scriptOutput:
                analysisResults = "printed output contains required output"
             else:
                analysisResults = "printed output does not contain required output"
          else:
              analysisResults = 'no student output'

             
       elif question == 6:
          expectedOutput = "['Bacteria', 'Firmicutes', 'Clostridia', 'Clostridiales']\
\n['Bacteria']\nEubacterium ramulus\
\n{'domain': 100, 'phylum': 58, 'class': 58, 'order': 58, 'family': 27, 'genus': 14, 'species': 11}"
          if scriptOutput:
             if scriptOutput.strip().replace('\r','') == expectedOutput:
                analysisResults = "printed output correct"
             elif expectedOutput.replace('  ',' ') == scriptOutput.strip().replace('\r','').replace('  ',' '):
	             analysisResults = "printed output seems to be correct"
             elif expectedOutput in scriptOutput.replace('\r',''):
                analysisResults = "printed output contains the required output"   
             else:
                analysisResults = "printed output does not contain required output"
          else:
             analysisResults = 'no student output'
    		
       elif question == 7:
          expectedOutput = "30 24 66.76923076923077 62.27272727272727 0.9326560536237956 22\n38 24 63.5 26.9 0.42362204724409447 22"
          if scriptOutput:
             if scriptOutput.replace('\r','').strip() == expectedOutput:
                analysisResults = "printed output correct"
             elif scriptOutput.replace('\r','').strip().replace('.','') == expectedOutput:
               analysisResults = "printed output may be correct: floats may be printed instead of integers"  
             elif (expectedOutput.replace('\r','').strip() in scriptOutput):
    	          analysisResults = "printed output contains required output"
             else:
                analysisResults = "printed output does not contain required output"
          else:
              analysisResults = 'no student output'
    		
       else:
          expectedOutput = "No expected output defined for question " + str(question)
          analysisResults = "No analysis defined for question " + str(question)
   except:
       expectedOutput = "No expected output defined"
       analysisResults = "No analysis of results for this student output. Check output by eye or change FastGradeAnalysis.py"
   return expectedOutput, analysisResults
