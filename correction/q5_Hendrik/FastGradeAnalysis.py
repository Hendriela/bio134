# -*- coding: utf-8 -*-
"""
Created on Thu Apr 27 17:13:08 2017

@author: Nicholas LeBow
"""

"""
Sample student code output analysis script. Must contain a function "analyze()" which will be called by the main class.

This function will need to be re-defined whenever the exam questions or question ordering change!

Function arguments:
		questionIndex:
			Integer, indicates which question is selected (NOTE: ZERO-BASED INDEXING!)
		scriptOutput:
			String, output generated by a student script. To be compared with the correct solution for the appropriate
			question.

Expected return values:
	expectedOutput:
		String, the output a correct solution to the question would produce.
	analysisResults:
		String, should indicate whether the question was answered correctly, e.g. when several correct output strings
		exist such as when the desired output is a set and the results could be displayed in arbitrary order, allowing
		multiple correct output strings.
"""
import ast #for turning a string into a dictionary

def analyze(questionIndex, scriptOutput):
   question = questionIndex+1 # shift zero-based index to 1-based index
	
   try:
       if question == 1:
          expectedOutput = "good luck"
          if scriptOutput:
             if scriptOutput.strip() == expectedOutput:
                analysisResults = "printed output correct"
             elif expectedOutput in scriptOutput:
    	         analysisResults = "printed output contains required output"
             else:
                analysisResults = "printed output does not contain required output"
          else:
              analysisResults = 'no student output'
              
       elif question == 2:
           
           expectedOutput = "{'A': [0, 7, 8], 'U': [1, 3, 4], 'G': [2, 6], 'C': [5]}"
           d = {'A': [0, 7, 8], 'U': [1, 3, 4], 'G': [2, 6], 'C': [5]}
           try:
               dScriptOutput = ast.literal_eval(scriptOutput.strip())
           except:
               dScriptOutput = {}
               analysisResults = "printed output could not be converted to a dictionary"
           if scriptOutput:
              try:
                  if isinstance(dScriptOutput,dict) and len(dScriptOutput)>0:
                      if d == dScriptOutput and len(str(d))==len(scriptOutput.strip()):
                         analysisResults = "printed output correct"
                      elif d == dScriptOutput:
                         analysisResults = "printed output can be interpreted as the correct \
                                            dictionary. However, the length of the printed output\
                                            does not correspond to the length of the printed dictionary."
                      else:
                         analysisResults = "Missing keys:"+str(set(d.keys()) - set(dScriptOutput.keys()))+"\n"
                         analysisResults += "Keys that should not be present:"+str(set(dScriptOutput.keys()) - set(d.keys()))+"\n"
                         for key in d:
                             expType = type(d[key])
                             expLength = len(d[key])
                             break
                         for key in dScriptOutput:
                             scriptType = type(dScriptOutput[key])
                             scriptLength = len(dScriptOutput[key])
                             break
                         if expType != scriptType:
                             analysisResults += "Values have wrong datatype: " + str(scriptType) + " instead of " + str(expType)+"\n"
                         if expLength != scriptLength:
                             analysisResults += "Values have wrong length. \n"
                         analysisResults = analysisResults.replace('set()', ' ')
                  else:
                      analysisResults = "printed output could not be converted to a dictionary"
              except:
                 analysisResults = 'output not analyed correctly, possibly no lists in dictionary values'
           else:
              analysisResults = 'no student output' 
           
           
       elif question == 3:
          expectedOutput = "The 9th number has brought the sum above the threshold!"
          if scriptOutput:
             if scriptOutput.replace('\r','').strip() == expectedOutput:
                analysisResults = "printed output correct"
             elif expectedOutput.replace('\r','').strip() in scriptOutput:
                analysisResults = "printed output contains required output"
             else:
                analysisResults = "printed output does not contain required output"
          else:
              analysisResults = 'no student output'
              
    		
       elif question ==4:
          expectedOutput = "[13622.021218 13924.207528 13901.032028 13897.297232 13978.789918\n 13937.638388 13888.950176 13874.45905  13711.046962 13664.24686 \n 13557.45596  13617.378826]"
          # expectedOutput = "[13622.02121813924.20752813901.03202813897.29723213978.78991813937.63838813888.95017613874.4590513711.04696213664.2468613557.4559613617.378826]"
          if scriptOutput:
             if scriptOutput.replace(' ','').replace("\n",'').strip() == expectedOutput.replace(' ','').replace("\n",'').strip():
                analysisResults = "printed output correct"
             elif expectedOutput.replace('\r','').strip() in scriptOutput:
                analysisResults = "printed output contains required output"
             else:
                analysisResults = "printed output does not contain required output"
          else:
              analysisResults = 'no student output'

          # expectedOutput = "{'cy': ['cy101', 'cy10339', 'cy57'], 'ga': ['ga15914', 'ga2201'], 'fi': ['fi20693', 'fi7767'], 'de': ['de32927', 'de522', 'de7777'], 'ac': ['ac375', 'ac47381', 'ac517', 'ac8603']}"
          # d = {'cy': ['cy101', 'cy10339', 'cy57'], 'ga': ['ga15914', 'ga2201'], 'fi': ['fi20693', 'fi7767'], 'de': ['de32927', 'de522', 'de7777'], 'ac': ['ac375', 'ac47381', 'ac517', 'ac8603']}
          # try:
          #     dScriptOutput = ast.literal_eval(scriptOutput.strip())
          # except:
          #     dScriptOutput = {}
          #     analysisResults = "printed output could not be converted to a dictionary"
          # if scriptOutput:
          #   try:
          #       if isinstance(dScriptOutput,dict) and len(dScriptOutput)>0:
          #           if d == dScriptOutput and len(str(d))==len(scriptOutput.strip()):
          #               analysisResults = "printed output correct"
          #           elif d == dScriptOutput:
          #               analysisResults = "printed output can be interpreted as the correct \
          #                                 dictionary. However, the length of the printed output\
          #                                 does not correspond to the length of the printed dictionary."
          #           else:
          #               analysisResults = "Missing keys:"+str(set(d.keys()) - set(dScriptOutput.keys()))+"\n"
          #               analysisResults += "Keys that should not be present:"+str(set(dScriptOutput.keys()) - set(d.keys()))+"\n"
          #               analysisResults += "Missing values:"+str(set(d.values()) - set(dScriptOutput.values()))+"\n"
          #               analysisResults += "Values that should not be present:"+str(set(dScriptOutput.values()) - set(d.values()))
          #               analysisResults = analysisResults.replace('set()',' none')
          #       else:
          #           analysisResults = "printed output could not be converted to a dictionary"
          #   except:
          #       analysisResults = 'output not analyed correctly, possibly lists in dictionary'
          # else:
          #   analysisResults = 'no student output' 
    		
       elif question == 5:
          expectedOutput = "Mercury ..   4878 km in diameter   57909227 km away from the sun\n\
Venus ....  12104 ..............  108209475 ....................\n\
Earth ....  12742 ..............  149598262 ....................\n\
Mars .....   6779 ..............  227943824 ....................\n\
Jupiter .. 139822 ..............  778340821 ....................\n\
Saturn ... 116464 .............. 1426666422 ....................\n\
Uranus ...  50724 .............. 2870658186 ....................\n\
Neptune ..  49244 .............. 4498396441 ...................."
          if scriptOutput:
             if scriptOutput.replace('\r','').strip() == expectedOutput:
                analysisResults = "printed output correct"
             elif expectedOutput.replace('\r','').strip() in scriptOutput:
                analysisResults = "printed output contains required output"
             else:
                analysisResults = "printed output does not contain required output"
          else:
              analysisResults = 'no student output'

             
       elif question == 6:
          expectedOutput = "A   0.4   0.6   0.1   0.0   0.0   0.6   0.7   0.2   0.1   \n\
C   0.1   0.2   0.1   0.0   0.0   0.2   0.1   0.1   0.2   \n\
G   0.1   0.1   0.7   1.0   0.0   0.1   0.1   0.5   0.1   \n\
T   0.4   0.1   0.1   0.0   1.0   0.1   0.1   0.2   0.6  \n\
position 14: GAGGTGAAG, 4.5\nposition 127: CAGGTAGTC, 4.5\nAAGGTAAGT OR TAGGTAAGT"
          if scriptOutput:
             if scriptOutput.strip().replace('\r','') == expectedOutput:
                analysisResults = "printed output correct"
             elif expectedOutput.replace('  ',' ') == scriptOutput.strip().replace('\r','').replace('  ',' '):
	             analysisResults = "printed output seems to be correct"
             elif expectedOutput in scriptOutput.replace('\r',''):
                analysisResults = "printed output contains the required output"   
             else:
                analysisResults = "printed output does not contain required output"
          else:
             analysisResults = 'no student output'
    		
       elif question == 7:
          expectedOutput = "A Alanine\n\
B Arginine\n\
C Cysteine\n\
D Asparagine\n\
E Aspartic acid\n\
F Glutamic acid\n\
G Glycine\n\
H Histidine\n\
I Isoleucine\n\
J Glutamine\n\
K Leucine\n\
L Lysine\n\
M Methionine\n\
N Phenylalanine\n\
O Threonine\n\
P Proline\n\
Q Tryptophan\n\
R ---\n\
S Serine\n\
T Tyrosine\n\
U ---\n\
V Valine\n\
W ---\n\
X ---\n\
Y ---\n\
Z ---"
          if scriptOutput:
             if scriptOutput.replace('\r','').strip() == expectedOutput:
                analysisResults = "printed output correct"
             elif scriptOutput.replace('\r','').strip().replace('.','') == expectedOutput:
               analysisResults = "printed output may be correct: floats may be printed instead of integers"  
             elif (expectedOutput.replace('\r','').strip() in scriptOutput):
    	          analysisResults = "printed output contains required output"
             else:
                analysisResults = "printed output does not contain required output"
          else:
              analysisResults = 'no student output'
    		
       else:
          expectedOutput = "No expected output defined for question " + str(question)
          analysisResults = "No analysis defined for question " + str(question)
   except:
       expectedOutput = "No expected output defined"
       analysisResults = "No analysis of results for this student output. Check output by eye or change FastGradeAnalysis.py"
   return expectedOutput, analysisResults
